import os
import sys

# Add the project's root directory to the Python path
current_dir = os.path.dirname(__file__)
project_root = os.path.abspath(os.path.join(current_dir, '..'))
sys.path.append(project_root)

# Use absolute import
from calc_operations.lst_op import get_sorted, get_filtered_val, get_index, get_slice, is_palindrome
from calc_operations.stat_op import get_lst_mean, get_lst_median, get_sample_std_dev_lst, get_population_std_dev_lst
from calc_operations.arithmetic_op import get_sum, get_average, get_max, get_min, get_product, get_count, get_cumulative_sum, get_add_constant
from calc_operations.math_op import get_exponential_func, get_sin_value, get_cos_value, get_tan_value


class CalculatorOperations:
    def __init__(self):
        # Initialize as needed
        pass
    # Helper method to check if there's no input
    def _check_input_list(self, input_list):
        if input_list is None:
            raise ValueError("Input list cannot be None.")
        # Additional code for the function, if needed
        
    # Helper method to check if list is empty
    def _check_empty_list(self, input_list):
        # Check if input is empty
        if not isinstance(input_list, list):
            raise ValueError("Empty input")

    # Helper method to check if input is a list
    def _check_instanceType(self, input_list):
        # Check if input is a list
        if not isinstance(input_list, list): 
            raise TypeError("Input must be a list")

    
    def list_operations(self, numerical_input):
        # Unpacking operator (*) to convert numerical_input into individual elements, adds None values 
        # and performs slice operation [:3] to take first three elements 
        operation_type, operand_a, operand_b = (*numerical_input, None, None, None)[:3]       
        # Perform various calculator operations based on user input
        # Return the result of the calculations
        if operation_type == 'sort_list':
            result = get_sorted(operand_a)
        elif operation_type == 'filter_list':
            result = get_filtered_val(operand_a, operand_b) 
            # Assuming operand is a tuple (list, condition)
        elif operation_type == 'index_list':
            result = get_index(operand_a, operand_b)
        elif operation_type == 'slice_list':
            result = get_slice(operand_a, operand_b)
        elif operation_type == 'is_palindrome':
            result = is_palindrome(operand_a)
        else:                                               
            raise ValueError("Unsupported operation type")

        return result

    def stat_operations(self, numerical_input):
        operation_type, operand_a, operand_b = (*numerical_input, None, None, None)[:3]
        if operation_type == 'mean_list':
            result = get_lst_mean(operand_a)
        elif operation_type == 'median_list':
            result = get_lst_median(operand_a)
        elif operation_type == 'sample_standard_deviation':
            result = get_sample_std_dev_lst(operand_a)               
        elif operation_type == 'population_standard_deviation': 
            result = get_population_std_dev_lst(operand_a)                   
    
        else:
            raise ValueError("Unsupported operation type")

        return result

    def arith_operations(self, numerical_input): 
        operation_type, operand_a, operand_b = (*numerical_input, None, None, None)[:3]
        if operation_type == 'sum_list':
            result = get_sum(operand_a)
        elif operation_type == 'average_list':
            result = get_average(operand_a)
        elif operation_type == 'max_list':
            result = get_max(operand_a)     
        elif operation_type == 'min_list':
            result = get_min(operand_a)   
        elif operation_type == 'product_list':
            result = get_product(operand_a)
        elif operation_type == 'list_count':
            result = get_count(operand_a)
        elif operation_type == 'cumulative_sum':
            result = get_cumulative_sum(operand_a)
        elif operation_type == 'add_constant':
            result = get_add_constant(operand_a)
        else:
            raise ValueError("Unsupported operation type")

        return result

    def math_operations(self, numerical_input):
        operation_type, operand_a, operand_b = (*numerical_input, None, None, None)[:3]
        if operation_type == 'exponential_function':
            return get_exponential_func(operand_a)
        elif operation_type == 'logarithmic_function':
            return get_log_function(operand_a)
        elif operation_type == 'sin_value':
            return get_sin_value(operand_a)
        elif operation_type == 'cos_value':
            return get_cos_value(operand_a)
        elif operation_type == 'tan_value':
            return get_tan_value(operand_a)
        else:
            raise ValueError("Unsupported operation type")
        

    
# Create an instance of the CalculatorOperations class
calculator = CalculatorOperations()


# Test the _check_input_list method with no input
try:
    calculator._check_input_list([])
    print("No ValueError was raised.")

except ValueError as e:
    print(f"ValueError: {e}")

# Test the _check_empty_list method with an empty list
try:
    calculator._check_empty_list([])
    print("No ValueError was raised.")

except ValueError as e:
    print(f"ValueError: {e}")


# Test the _check_instance_list method with different data type
try:
    calculator._check_instanceType({})
    print("No TypeError was Raised")
except TypeError as e:
    print(f"TypeError: {e}")

        

try:
    # Test sorting a list
    input_data = ('sort_list', [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])
    result = calculator.list_operations(input_data)
    print(f"Sorted List: {result}")

    # Test filtering a list
    def condition(x):
        return x % 2 == 0

    input_data = ('filter_list', [1, 2, 3, 4, 5, 6, 7, 8, 9], condition)
    result = calculator.list_operations(input_data)
    print(f"Filtered List: {result}")

    # Test getting index in list
    input_data = ('index_list', [10, 20, 25, 30, 36], 25)
    result = calculator.list_operations(input_data)
    print(f"Index of list is: {result}")

    # Test palindrome check
    input_data = ('is_palindrome', [1,2,3,4,None,4,3,2,1])
    result = calculator.list_operations(input_data)
    print(f"List is Palindrome: {result}")

except ValueError as e:
    print(f"ValueError: {e}")

try:
    # Test slicing a list
    input_data = ('slice_list', [1, 2, 3, 5, 8, 13, 21, 34], [2, 13])
    result = calculator.list_operations(input_data)
    print(f"Sliced List: {result}")

except ValueError as e:
    print(f"ValueError: {e}")


try: 
    # Test mean of list
    input_data = ('mean_list', [213, 324.3, 7124, 332.23, 403])
    result = calculator.stat_operations(input_data)
    print(f"Mean of List: {result}")

    # Test median of list
    input_data = ('median_list',  [213, 324.3, 7124, 332.23, 403])
    result = calculator.stat_operations(input_data)
    print(f"Median of List: {result}")

    # Test Sample standard deviation of list:
    input_data = ('sample_standard_deviation', [213, 324.3, 7124, 332.23, 403])
    result = calculator.stat_operations(input_data)
    print(f"Standard Deviation (Sample) of List: {result}")

    # Test Sample standard deviation of list:
    input_data = ('population_standard_deviation', [213, 324.3, 7124, 332.23, 403])
    result = calculator.stat_operations(input_data)
    print(f"Standard Deviation (Population) of List: {result}")


except ValueError as e:
    print(f"Value error: {e}")

try:
    # Test sum of list
    input_data = ('sum_list', [124124, 1312.324, 252614, 13, 223, 2352, 725, 564])
    result = calculator.arith_operations(input_data)
    print(f"Sum of list: {result}")

    # Test average of list
    input_data = ('average_list', [ 123, 321, 6146, 1132.32, 324, 972, 38, 93, 3707])
    result = calculator.arith_operations(input_data)
    print(f"Average of list: {result}")

    # Test max of list
    input_data = ('max_list', [23, 123, 15, 6114, 435, 6436, 253, 235])
    result = calculator.arith_operations(input_data)
    print(f"Max value of list: {result}")

    # Test min of list
    input_data = ('min_list', [23, 123, 15, 6114, 435, 6436, 253, 235])
    result = calculator.arith_operations(input_data)
    print(f"Min value of list: {result}")

    # Test product of list
    input_data = ('product_list', [23, 123, 15, 6114, 435, 6436, 253, 235])
    result = calculator.arith_operations(input_data)
    print(f"Product of list: {result}")

    # Test occurrences of list
    input_data = ('list_count', [23, 123, 15, 6114, 435, 6436, 253, 235])
    result = calculator.arith_operations(input_data)
    print(f"Occurrences of list: {result}")

    # Test cumulative sum of list
    input_data = ('cumulative_sum', [23, 123, 15, 6114, 435, 6436, 253, 235])
    result = calculator.arith_operations(input_data)
    print(f"Cumulative sum of list: {result}")

    # Test add constant
    input_data = ('add_constant', [23, 123, 15, 6114, 435, 6436, 253, 235])
    result = calculator.arith_operations(input_data)
    print(f"Add constant in list: {result}")


except ValueError as e:
    print(f"Value error: {e}")


try:
    # Test exponential function
    input_data = ('exponential_function', [23, 123, 15, 6114, 435, 6436, 253, 235])
    result = calculator.math_operations(input_data)
    print(f"Exponential function: {result}")

    # Test logarithmic function

    # Test sin value
    input_data = ('sin_value', [235, 45, 180,33, 220 ])
    result = calculator.math_operations(input_data)
    print(f"Sin values of list: {result}")

    # Test cos value 
    input_data = ('cos_value', [235, 45, 180,33, 220 ])
    result = calculator.math_operations(input_data)
    print(f"Cos values of list: {result}")

    # Test cos value 
    input_data = ('tan_value', [235, 45, 180,33, 220 ])
    result = calculator.math_operations(input_data)
    print(f"Tan values of list: {result}")

except ValueError as e:
    print(f"Value error: {e}")


