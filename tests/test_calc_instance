import os
import sys

# Add the project's root directory to the Python path
current_dir = os.path.dirname(__file__)
project_root = os.path.abspath(os.path.join(current_dir, '..'))
sys.path.append(project_root)

# Use absolute import
from calc_operations.lst_op import get_sorted, get_filtered_val


class CalculatorOperations:
    def __init__(self):
        # Initialize as needed
        pass
    # Helper method to check if there's no input
    def _check_input_list(self, input_list):
        if input_list is None:
            raise ValueError("Input list cannot be None.")
        # Additional code for the function, if needed

    
    def list_operations(self, numerical_input):
        # Unpacking operator (*) to convert numerical_input into individual elements, adds None values 
        # and performs slice operation [:3] to take first three elements 
        operation_type, operand_a, operand_b = (*numerical_input, None, None, None)[:3]       
        # Perform various calculator operations based on user input
        # Return the result of the calculations
        if operation_type == 'sort_list':
            result = get_sorted(operand_a)
        elif operation_type == 'filter_list':
            result = get_filtered_val(operand_a, operand_b) 
            # Assuming operand is a tuple (list, condition)
        else:                                               
            raise ValueError("Unsupported operation type")

        return result


# Create an instance of the CalculatorOperations class
calculator = CalculatorOperations()

# Test the _check_input_list method with an empty list
try:
    calculator._check_input_list([])
    print("No ValueError was raised.")
except ValueError as e:
    print(f"ValueError: {e}")

    
try:
    # Test sorting a list
    input_data = ('sort_list', [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])
    result = calculator.list_operations(input_data)
    print(f"Sorted List: {result}")

    # Test filtering a list
    def condition(x):
        return x % 2 == 0

    input_data = ('filter_list', [1, 2, 3, 4, 5, 6, 7, 8, 9], condition)
    result = calculator.list_operations(input_data)
    print(f"Filtered List: {result}")

except ValueError as e:
    print(f"ValueError: {e}")